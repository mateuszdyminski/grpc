// Code generated by protoc-gen-go. DO NOT EDIT.
// source: search.proto

/*
Package search is a generated protocol buffer package.

It is generated from these files:
	search.proto

It has these top-level messages:
	Request
	Result
*/
package search

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Result struct {
	Title   string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Snippet string `protobuf:"bytes,3,opt,name=snippet" json:"snippet,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Result) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Result) GetSnippet() string {
	if m != nil {
		return m.Snippet
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "search.Request")
	proto.RegisterType((*Result)(nil), "search.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SearchEngine service

type SearchEngineClient interface {
	// Search returns a Search Engine result for the query.
	Search(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	// Watch returns a stream of Google search results for the query.
	Watch(ctx context.Context, in *Request, opts ...grpc.CallOption) (SearchEngine_WatchClient, error)
	// BiWatch returns a stream of Google search results for the stream of queries.
	BiWatch(ctx context.Context, opts ...grpc.CallOption) (SearchEngine_BiWatchClient, error)
}

type searchEngineClient struct {
	cc *grpc.ClientConn
}

func NewSearchEngineClient(cc *grpc.ClientConn) SearchEngineClient {
	return &searchEngineClient{cc}
}

func (c *searchEngineClient) Search(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/search.SearchEngine/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchEngineClient) Watch(ctx context.Context, in *Request, opts ...grpc.CallOption) (SearchEngine_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SearchEngine_serviceDesc.Streams[0], c.cc, "/search.SearchEngine/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchEngineWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SearchEngine_WatchClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type searchEngineWatchClient struct {
	grpc.ClientStream
}

func (x *searchEngineWatchClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *searchEngineClient) BiWatch(ctx context.Context, opts ...grpc.CallOption) (SearchEngine_BiWatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SearchEngine_serviceDesc.Streams[1], c.cc, "/search.SearchEngine/BiWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchEngineBiWatchClient{stream}
	return x, nil
}

type SearchEngine_BiWatchClient interface {
	Send(*Request) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type searchEngineBiWatchClient struct {
	grpc.ClientStream
}

func (x *searchEngineBiWatchClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *searchEngineBiWatchClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SearchEngine service

type SearchEngineServer interface {
	// Search returns a Search Engine result for the query.
	Search(context.Context, *Request) (*Result, error)
	// Watch returns a stream of Google search results for the query.
	Watch(*Request, SearchEngine_WatchServer) error
	// BiWatch returns a stream of Google search results for the stream of queries.
	BiWatch(SearchEngine_BiWatchServer) error
}

func RegisterSearchEngineServer(s *grpc.Server, srv SearchEngineServer) {
	s.RegisterService(&_SearchEngine_serviceDesc, srv)
}

func _SearchEngine_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchEngineServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.SearchEngine/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchEngineServer).Search(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchEngine_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchEngineServer).Watch(m, &searchEngineWatchServer{stream})
}

type SearchEngine_WatchServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type searchEngineWatchServer struct {
	grpc.ServerStream
}

func (x *searchEngineWatchServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _SearchEngine_BiWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearchEngineServer).BiWatch(&searchEngineBiWatchServer{stream})
}

type SearchEngine_BiWatchServer interface {
	Send(*Result) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type searchEngineBiWatchServer struct {
	grpc.ServerStream
}

func (x *searchEngineBiWatchServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *searchEngineBiWatchServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SearchEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "search.SearchEngine",
	HandlerType: (*SearchEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchEngine_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _SearchEngine_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BiWatch",
			Handler:       _SearchEngine_BiWatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "search.proto",
}

func init() { proto.RegisterFile("search.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x4d, 0x2c,
	0x4a, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xe4, 0xb9, 0xd8,
	0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x0b, 0x4b, 0x53, 0x8b, 0x2a,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x25, 0x2f, 0x2e, 0xb6, 0xa0, 0xd4, 0xe2,
	0xd2, 0x1c, 0xb0, 0x7c, 0x49, 0x66, 0x49, 0x4e, 0x2a, 0x4c, 0x1e, 0xcc, 0x11, 0x12, 0xe0, 0x62,
	0x2e, 0x2d, 0xca, 0x91, 0x60, 0x02, 0x8b, 0x81, 0x98, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0x79, 0x99,
	0x05, 0x05, 0xa9, 0x25, 0x12, 0xcc, 0x60, 0x51, 0x18, 0xd7, 0x68, 0x36, 0x23, 0x17, 0x4f, 0x30,
	0xd8, 0x5e, 0xd7, 0xbc, 0xf4, 0xcc, 0xbc, 0x54, 0x21, 0x6d, 0x2e, 0x36, 0x08, 0x5f, 0x88, 0x5f,
	0x0f, 0xea, 0x3c, 0xa8, 0x6b, 0xa4, 0xf8, 0x10, 0x02, 0x20, 0xdb, 0x95, 0x18, 0x84, 0x74, 0xb8,
	0x58, 0xc3, 0x13, 0x4b, 0x88, 0x52, 0x6b, 0xc0, 0x28, 0x64, 0xc0, 0xc5, 0xee, 0x94, 0x49, 0xac,
	0x7a, 0x0d, 0x46, 0x03, 0x46, 0x27, 0x35, 0x2e, 0xfe, 0xe4, 0xfc, 0x5c, 0xbd, 0xf4, 0xa2, 0x82,
	0x64, 0xa8, 0xbc, 0x13, 0x37, 0xc4, 0x75, 0x01, 0xa0, 0x20, 0x0b, 0x60, 0x5c, 0xc4, 0xc4, 0xec,
	0xee, 0xee, 0x93, 0xc4, 0x06, 0x0e, 0x41, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x98,
	0x8e, 0x9e, 0x51, 0x01, 0x00, 0x00,
}
